#loc = loc(unknown)
#loc1 = loc("inputs[0][0]")
#loc2 = loc("inputs[0][1]")
#loc3 = loc("inputs[0][2]")
module @jit_func attributes {jax.uses_shape_polymorphism = false, mhlo.num_partitions = 1 : i32, mhlo.num_replicas = 1 : i32} {
  func.func public @main(%arg0: tensor<2x4xf32> loc("inputs[0][0]"), %arg1: tensor<2x4xf32> loc("inputs[0][1]"), %arg2: tensor<4x3xf32> loc("inputs[0][2]")) -> (tensor<2x3xf32> {jax.result_info = "result[0]"}) {
    %cst = stablehlo.constant dense<1.000000e+00> : tensor<f32> loc(#loc)
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2x4xf32> loc(#loc6)
    %1 = stablehlo.multiply %arg1, %0 : tensor<2x4xf32> loc(#loc6)
    %2 = stablehlo.add %arg0, %1 : tensor<2x4xf32> loc(#loc7)
    %3 = call @relu(%2) : (tensor<2x4xf32>) -> tensor<2x4xf32> loc(#loc8)
    %4 = stablehlo.dot_general %3, %arg2, contracting_dims = [1] x [0] : (tensor<2x4xf32>, tensor<4x3xf32>) -> tensor<2x3xf32> loc(#loc9)
    return %4 : tensor<2x3xf32> loc(#loc)
  } loc(#loc)
  func.func private @relu(%arg0: tensor<2x4xf32> loc(unknown)) -> tensor<2x4xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc12)
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2x4xf32> loc(#loc11)
    %1 = stablehlo.maximum %arg0, %0 : tensor<2x4xf32> loc(#loc11)
    return %1 : tensor<2x4xf32> loc(#loc12)
  } loc(#loc12)
} loc(#loc)
#loc4 = loc("E:\\stablehlo-onnx\\src\\generate_torch_mlir.py":26:21 to :75)
#loc5 = loc("<module>"(#loc4))
#loc6 = loc("jit(func)/mul"(#loc5))
#loc7 = loc("jit(func)/add"(#loc5))
#loc8 = loc("jit(func)/jit(relu)"(#loc5))
#loc9 = loc("jit(func)/dot_general"(#loc5))
#loc10 = loc("jit"(#loc5))
#loc11 = loc("max"(#loc5))
#loc12 = loc("jit:"(#loc10))
